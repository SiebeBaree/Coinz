// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type InventoryItem {
  itemId String
  amount Int
}

type MemberInvestment {
  ticker   String
  amount   String
  buyPrice String
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  sessions         Session[]
  accounts         Account[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Investment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ticker    String
  type      String
  fullName  String
  price     String
  changed   String
  updatedAt DateTime @updatedAt
  expires   DateTime

  @@unique([ticker, type])
}

model members {
  pk           String   @id @default(auto()) @map("_id") @db.ObjectId
  id           String
  banned       Boolean
  votes        Int
  wallet       Int
  bank         Int
  bankLimit    Int
  experience   Int
  inventory    InventoryItem[]
  stocks       MemberInvestment[]
  profileColor String
}

model BotStats {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  guilds      Int
  users       Int
  commands    Int
  investments Int
  updatedAt   DateTime @updatedAt
}

model Item {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  itemId          String  @unique
  category        String
  name            String
  emoteId         String
  description     String
  longDescription String?
  buyPrice        Int?
  sellPrice       Int?
  multiplier      Int?
  duration        Int?
}

type GameStats {
  won         Int
  lost        Int
  tied        Int
  moneySpent  Int
  moneyEarned Int
}

type DailyActivity {
  startDay      DateTime
  totalCommands Int
}

type InvestmentStats {
  amountOfTimesBought Int
  amountOfTimesSold   Int
  totalBuyPrice       Int
}

model userstats {
  pk          String   @id @default(auto()) @map("_id") @db.ObjectId
  id          String
  totalEarned Int
  totalSpend  Int
  itemsBought Int
  itemsSold   Int
  games       GameStats
  treesCutDown Int
  totalTreeHeight Int
  luckyWheelSpins Int
  timesWorked Int
  fishCaught Int
  animalsKilled Int
  timesRobbed Int
  timesPlotPlanted Int
  timesPlotHarvested Int
  timesPlotWatered Int
  timesPlotFertilized Int
  moneyEarnedOnBusinesses Int
  dailyActivity DailyActivity
  moneyDonated Int
  moneyReceived Int
  investments InvestmentStats
}

model Plan {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  productId     Int            @unique
  variantId     Int            @unique
  name          String?
  description   String?        @default("")
  variantName   String
  sort          Int            @default(100)
  status        String         @default("published")
  price         Int
  interval      String         @default("month")
  intervalCount Int            @default(1)
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model WebhookEvent {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime  @default(now())
  eventName       String
  processed       Boolean   @default(false)
  body            Json
  processingError String?
}

model Subscription {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  lemonSqueezyId     Int       @unique
  orderId            Int       @unique
  name               String
  email              String
  status             String
  statusFormatted    String
  renewsAt           DateTime?
  endsAt             DateTime?
  trialEndsAt        DateTime?
  price              Int
  isPaused           Boolean   @default(false)
  plan               Plan      @relation(fields: [planId], references: [id])
  planId             String    @db.ObjectId
  memberId           String
  isUsageBased       Boolean   @default(false)
  subscriptionItemId Int?      @unique

  @@index([planId, lemonSqueezyId])
}